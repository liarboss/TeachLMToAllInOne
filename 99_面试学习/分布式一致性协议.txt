# 常见算法
根据解决的是非拜占庭还是拜占庭错误，可以分为：

CFT（crash fault tolerance）：常见经典算法包括paxos、raft及其变种，这类容错算法性能较好，处理较快，容忍不超过一半的故障节点。
BFT（byzantine fault tolerance）：包括PBFT（practical byzantine fault tolerance）为代表的确定性系列算法（一旦达成共识，就不可逆转，共识是最终结果），pow为代表的概率算法（共识是临时的，随着时间推移或某种强化，共识结果被推翻的概率越来越小，成为事实上的最终结果）等。拜占庭类容错算法往往性能较差，容忍不超过1/3的故障节点。
XFT（cross fault tolerance）：改进算法，可以提供类似CFT的处理响应速度，并能在大多数节点正常工作时提供BFT保障。
FLP不可能原理：即便在网络通信可靠的情况下，可扩展的分布式系统的共识问题，其通用解法的理论下限是没有下限（无解）。这个原理可以看做是分布式领域里的”测不准原理“。


# FLP不可能原理
    FLP 不可能原理:在网络可靠,存在节点失效(即便只有一个)的最小化异步模型系统中,不存在一个可以解决一致性问题的确定性算法。
在分布式系统中，同步和异步存在特殊的含义：

同步：系统中的各个节点的时钟误差存在上限，并且消息的传递必须在一定时间内完成，否则认为失败；同时各个节点完成处理消息的时间是一定的。比较容易判断消息是否丢失。
异步：系统中各个节点可能存在较大的时钟差异，同时消息传输时间是任意长的，各节点对消息进行处理的时间也可能是任意长的，无法判断消息问题。
    科学告诉我们什么是不可能的，工程则告诉我们，付出一些代价，可以把他变为可行。


# CAP
分布式系统不可能同时确保以下三个特性：

一致性：任何操作应该都是原子的，发生在后面的事件能看到前面事件发生导致的结果，这里指的是强一致性；
可用性：在有限时间内，任何非失败节点都能应答请求；
分区容忍性：网络可能发生分区，即节点之间的通信不可保障。
网络分区出现时，系统无法同时保障CA，要么节点收到请求后因为没有得到其他节点的确认而不应答（牺牲可用性），要么节点只能应答非一致的结果（牺牲一致性）。
在分布式数据库领域，通常满足ACID原则，允许付出可用性的代价。
与ACID相对的，是BASE原则（Base availability，soft-state，eventual Consistency）：通过实现最终一致性，来换取。










