16 | 如何搭建一套适合你的服务追踪系统？

1）服务追踪系统的实现
    埋点数据收集，负责在服务端进行埋点，来收集服务调用的上下文数据。
    实时数据处理，负责对收集到的链路信息，按照traceId和spanId进行串联和存储。
    数据链路展示，把处理后的服务调用数据，按照调用链的形式展示出来。
2）两个开源的实现方案
    OpenZipkin、Pinpoint
3）总结
    从选型的角度来讲，如果你的业务采用的是Java语言，那么采用Pinpoint是个不错的选择，因为它不需要业务改动一行代码就可以实现trace信息的收集。除此之外，Pinpoint不仅能看到服务与服务之间的链路调用，还能看到服务内部与资源层的链路调用，功能更为强大，如果你有这方面的需求，Pinpoint正好能满足。
    除了OpenZipkin和Pinpoint，业界还有其他开源追踪系统实现，比如Uber开源的Jaeger，以及国内的一款开源服务追踪系统SkyWalking。不过由于目前应用范围不是很广

17 | 如何识别服务节点是否存活？

1）心跳开关保护机制：需要一种保护机制，即使在网络频繁抖动的时候，服务消费者也不至于同时去请求注册中心获取最新的服务节点信息
2）服务节点摘除保护机制：这个时候就需要根据实际业务的情况，设定一个阈值比例，即使遇到刚才说的这种情况，注册中心也不能摘除超过这个阈值比例的节点。
3）静态注册中心：将心跳机制移动到消费者






























