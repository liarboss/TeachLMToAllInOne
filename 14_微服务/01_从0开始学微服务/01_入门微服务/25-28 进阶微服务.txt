25 | 微服务为什么要容器化？
1）微服务带来的问题
    保证开发人员将自己本地部署测试通过的代码和运行环境，能够复制到测试环境中去，测试通过后再复制到线上环境进行发布


26 | 微服务容器化运维：镜像仓库和资源调度
1）镜像仓库
    权限控制、镜像同步（Harbor所采取的主从复制的方案）、高可用性
2）资源调度
    物理机集群、虚拟机集群、公有云集群


27 | 微服务容器化运维：容器调度和服务编排
1）容器调度
    主机过滤：
        存活过滤。也就是说必须选择存活的节点，因为主机也有可能下线或者是故障状态。
        硬件过滤。打个比方，现在你面对的集群有Web集群、RPC集群、缓存集群以及大数据集群等，不同的集群硬件配置差异很大，比如Web集群往往用作计算节点，它的CPU一般配置比较高；而大数据集群往往用作数据存储，它的磁盘一般配置比较高。这样的话如果要创建计算任务的容器，显然就需要选择Web集群，而不是大数据集群。
    调度策略
        各主机的配置基本相同，并且使用也比较简单，一台主机上只创建一个容器。这样的话，每次创建容器的时候，直接从还没有创建过容器的主机当中随机选择一台就可以了。
        在某些在线、离线业务混布的场景下，为了达到主机资源使用率最高的目标，需要综合考量容器中跑的任务的特点，比如在线业务主要使用CPU资源，而离线业务主要使用磁盘和I/O资源，这两种业务的容器大部分情况下适合混跑在一起。
        还有一种业务场景，主机上的资源都是充足的，每个容器只要划定了所用的资源限制，理论上跑在一起是没有问题的，但是某些时候会出现对每个资源的抢占，比如都是CPU密集型或者I/O密集型的业务就不适合容器混布在一台主机上。
2）服务编排
    服务依赖：服务A调度的前提必须是先有服务B，这样的话就要求在进行容器调度的时候，还需要考虑服务之间的依赖关系。
    服务发现：
        基于Nginx的服务发现：比如基于Consul-Template和Consul，把Consul作为DB存储容器的节点列表，Consul-Template部署在Nginx上，Consul-Template定期去请求Consul，如果Consul中存储的节点列表发生变化，就会更新Nginx的本地配置文件，然后Nginx就会重新加载配置。
        基于注册中心的服务发现：这种主要是针对提供RPC服务的，当有新的容器节点时，需要调用注册中心提供的服务注册接口
    自动扩缩容：
        容器完成调度后，仅仅做到有容器不可用时故障自愈还不够，有时候还需要根据实际服务的运行状况，做到自动扩缩容。


28 | 微服务容器化运维：微博容器运维平台DCP
1）DCP整体架构(图28-01)
    DCP的架构主要分为四个部分：基础设施层、主机层、调度层、编排层，对应的分别解决前面提到的容器运维平台建设的几个关键问题

2）基础设施层
    用于存放容器镜像的镜像仓库、提供监控服务的监控中心、实时监控系统容量以便于自动扩缩容的容量评估系统以及容器创建后，如何加入线上服务的服务发现组件

3）主机层
    主机创建
    成本管理
    配置初始化
4）调度层
5）编排层
    服务依赖
    服务发现
    自动扩缩容




