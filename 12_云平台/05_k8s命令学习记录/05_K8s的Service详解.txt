1. kube-proxy三种工作模式-ipvs
    ipvs模式和iptables类似，kube-proxy监控Pod的变化并创建相应的ipvs规则。ipvs相对iptables转发效率更高，除此之外，ipvs支持更多的LB算法。

2. 开启ipvs（必须安装ipvs内核模块，否则会降级为iptables）
    kubectl edit cm kube-proxy -n kube-system
    kubectl delete pod -l k8s-app=kube-proxy -n kube-system
    # 测试ipvs模块是否开启成功
    ipvsadm -Ln


3. spec.type的说明
    ClusterIP：默认值，它是kubernetes系统自动分配的虚拟IP，只能在集群内部访问。
    NodePort：将Service通过指定的Node上的端口暴露给外部，通过此方法，就可以在集群外部访问服务。
    LoadBalancer：使用外接负载均衡器完成到服务的负载分发，注意此模式需要外部云环境的支持。
    ExternalName：把集群外部的服务引入集群内部，直接使用。


4. service使用
1）创建deployment.yaml文件
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pc-deployment
  namespace: dev
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-pod
  template:
    metadata:
      labels:
        app: nginx-pod
    spec:
      containers:
        - name: nginx
          image: nginx:1.17.1
          ports:
            - containerPort: 80

2）创建Deployment
kubectl create -f deployment.yaml

3）查看Pod信息
kubectl get pod -n dev -o wide --show-labels

4）为了方便后面的测试，分别进入容器，修改三台Nginx的index.html
kubectl exec -it  pc-deployment-7d7dd5499b-59qkm -c nginx -n dev /bin/sh
echo "10.244.1.30" > /usr/share/nginx/html/index.html
curl 10.244.1.30
curl 10.244.1.31
curl 10.244.2.67


5. ClusterIP类型的Service
1）创建service-clusterip.yaml文件
apiVersion: v1
kind: Service
metadata:
  name: service-clusterip
  namespace: dev
spec:
  selector:
    app: nginx-pod
  clusterIP: 10.97.97.97 # service的IP地址，如果不写，默认会生成一个
  type: ClusterIP
  ports:
    - port: 80 # Service的端口
      targetPort: 80 # Pod的端口

2）创建Service
kubectl create -f service-clusterip.yaml

3）查看Service
kubectl get svc -n dev -o wide

4）查看Service的详细信息(Endpoints里面是service可以负载到服务的入口)
kubectl describe svc service-clusterip -n dev

5）查看ipvs的映射规则：
ipvsadm -Ln

6）访问10.97.97.97:80，观察效果
curl 10.97.97.97:80

7）查看Endpoint
kubectl get endpoints -n dev -o wide

8）修改分发策略
apiVersion: v1
kind: Service
metadata:
  name: service-clusterip
  namespace: dev
spec:
  selector:
    app: nginx-pod
  clusterIP: 10.97.97.97 # service的IP地址，如果不写，默认会生成一个
  type: ClusterIP
  sessionAffinity: ClientIP # 修改分发策略为基于客户端地址的会话保持模式
  ports:
    - port: 80 # Service的端口
      targetPort: 80 # Pod的端口

9）重新部署
kubectl apply -f service-clusterip.yaml

10）循环测试访问，发现ip不变化了
while true;do curl 10.97.97.97:80; sleep 5; done;

11）删除Service
kubectl delete -f service-clusterip.yaml


6. HeadLiness类型的Service
1）创建service-headliness.yaml文件
apiVersion: v1
kind: Service
metadata:
  name: service-headliness
  namespace: dev
spec:
  selector:
    app: nginx-pod
  clusterIP: None # 将clusterIP设置为None，即可创建headliness Service
  type: ClusterIP
  ports:
    - port: 80 # Service的端口
      targetPort: 80 # Pod的端口

2）创建Service
kubectl create -f service-headliness.yaml

3）查看Service
kubectl get svc service-headliness -n dev -o wide

4）查看Service详情
kubectl describe svc service-headliness -n dev

5）查看域名解析情况
kubectl get pod -n dev

6）进入Pod中，执行cat /etc/resolv.conf命令：
kubectl exec -it pc-deployment-7d7dd5499b-59qkm -n dev /bin/sh
cat /etc/resolv.conf

7）通过Service的域名进行查询
dig @10.96.0.10 service-headliness.dev.svc.cluster.local


7. NodePort类型的Service
1）创建service-nodeport.yaml
apiVersion: v1
kind: Service
metadata:
  name: service-nodeport
  namespace: dev
spec:
  selector:
    app: nginx-pod
  type: NodePort # Service类型为NodePort
  ports:
    - port: 80 # Service的端口
      targetPort: 80 # Pod的端口
      nodePort: 30002 # 指定绑定的node的端口（默认取值范围是30000~32767），如果不指定，会默认分配

2）创建Service
kubectl create -f service-nodeport.yaml

3）查看Service
kubectl get svc service-nodeport -n dev -o wide

4）访问
http://192.168.18.100:30002/


8. Ingress使用
1）创建文件夹，并进入到此文件夹中
mkdir ingress-controller
cd ingress-controller
2）获取ingress-nginx
wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/mandatory.yaml
wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.30.0/deploy/static/provider/baremetal/service-nodeport.yaml
3）创建Ingress-nginx
kubectl apply -f ./
4）查看ingress-nginx
kubectl get pod -n ingress-nginx
5）查看Service
kubectl get svc -n ingress-nginx

6）准备Service和Pod，创建tomcat-nginx.yaml文件
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: dev
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-pod
  template:
    metadata:
      labels:
        app: nginx-pod
    spec:
      containers:
      - name: nginx
        image: nginx:1.17.1
        ports:
        - containerPort: 80

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomcat-deployment
  namespace: dev
spec:
  replicas: 3
  selector:
    matchLabels:
      app: tomcat-pod
  template:
    metadata:
      labels:
        app: tomcat-pod
    spec:
      containers:
      - name: tomcat
        image: tomcat:8.5-jre10-slim
        ports:
        - containerPort: 8080

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: dev
spec:
  selector:
    app: nginx-pod
  clusterIP: None
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80

---

apiVersion: v1
kind: Service
metadata:
  name: tomcat-service
  namespace: dev
spec:
  selector:
    app: tomcat-pod
  clusterIP: None
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080


7）创建Service和Pod
kubectl create -f tomcat-nginx.yaml

8）查看Service和Pod
kubectl get svc,pod -n dev

9）Http代理-创建ingress-http.yaml文件
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-http
  namespace: dev
spec:
  rules:
  - host: nginx.xudaxian.com
    http:
      paths:
      - path: /
        backend:
          serviceName: nginx-service
          servicePort: 80
  - host: tomcat.xudaxian.com
    http:
      paths:
      - path: /
        backend:
          serviceName: tomcat-service
          servicePort: 8080

10）创建
kubectl create -f ingress-http.yaml

11）查看
kubectl get ingress ingress-http -n dev

12）查看详情
kubectl describe ingress ingress-http -n dev

13）在本机的hosts文件中添加如下的规则（192.168.209.100为Master节点的IP地址）：
192.168.209.100 nginx.xudaxian.com
192.168.209.100 tomcat.xudaxian.com

14）查看ingress-nginx的端口
kubectl get svc -n ingress-nginx


9. Https代理
1）生成证书
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/C=CN/ST=BJ/L=BJ/O=nginx/CN=xudaxian.com"

2）创建密钥
kubectl create secret tls tls-secret --key tls.key --cert tls.crt

3）创建ingress-https.yaml文件
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-https
  namespace: dev
spec:
  tls:
    - hosts:
      - nginx.xudaxian.com
      - tomcat.xudaxian.com
      secretName: tls-secret # 指定秘钥
  rules:
  - host: nginx.xudaxian.com
    http:
      paths:
      - path: /
        backend:
          serviceName: nginx-service
          servicePort: 80
  - host: tomcat.xudaxian.com
    http:
      paths:
      - path: /
        backend:
          serviceName: tomcat-service
          servicePort: 8080


4）创建
kubectl create -f ingress-https.yaml

5）查看
kubectl get ingress ingress-https -n dev

6）查看详情
kubectl describe ingress ingress-https -n dev

7）在本机的hosts文件中添加如下的规则（192.168.209.100为Master节点的IP地址）
https://nginx.xudaxian.com:31125
https://tomcat.xudaxian.com:31125













