1. k8s能解决的问题
如图(01-01_k8s能解决的问题)

2. 应用上云的新架构（如图01-02_应用上云新架构）
k8s+serviceMesh

3. 常见技术
● 容器化技术：Docker、Docker Compose 。
● 大规模容器编排：Kubernetes 。
● 云原生应用商店：Helm 。
● 易用的容器管理平台：Rancher 。
● 一站式容器云平台：Kubersphere 。
● 云原生链路追踪标准：OpenTracing 。
● 云原生链路追踪实现产品：Jaeger 。
● ServiceMesh 下的服务流量治理：Istio 。
● 老牌的 CI、CD：Jenkins、JenkinsX、Jenkins-BlueOcean 。
● GitHub、GitLab 自带的 CI、CD：GitHub-CI/CD、GitLab-CI/CD 。
● kubernetes 声明式持续集成：Argo。
● Maven 私有仓库：Nexus 。
● Docker 私有仓库：Harbor 。
● 监控和可视化方案：Prometheus 和 Grafana 。
● 日志和可视化方案：ElasticSearch + Fluentd + Kibana 。
● 无服务器上云方案：Serverless 。
● 微服务上云方案：SpringCloud Kubernetes 。

4. 应用12要素
1）Codebase（基准代码）：一份基准代码，多份部署。
2）Dependencies（依赖）：显示声明依赖关系。
3）Config（配置分离）：在环境中存储配置
4）Backing services（后端服务）：将后端服务当做附加资源
5）Build, release, run（构建、发布、运行）
  ○ ① 构建阶段：是指将代码仓库转化为可执行包的过程。构建时会使用指定版本的代码，获取和打包依赖项，编译成二进制文件和资源文件。
  ○ ② 发布阶段：会将构建的结果和当前部署所需 配置 相结合，并能够立刻在运行环境中投入使用。
  ○ ③ 运行阶段（或者说“运行时”）：是指针对选定的发布版本，在执行环境中启动一系列应用程序进程。
6）Processes（进程）
   以一个或多个无状态进程运行应用
7）Port binding（端口绑定）：通过端口绑定来提供服务
8）Concurrency（并发）：通过进程模式来进行扩展。
9）Disposability（易处理）：快速启动和优雅终止可最大化健壮性。
10）Dev/prod parity（开发环境和线上环境等价）：尽可能的保持开发、预发布、线上环境相同。
11）Logs（日志）：将日志当做事件流
12）Admin processes（管理进程）：后台管理任务当做一次性进程运行。


5. 蓝绿部署：灾备














